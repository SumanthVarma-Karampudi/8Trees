//Printing Tree
void PrintTree(TreeNode<int>* root){                       //   1:2,3
  cout<< root->data << endl;                               // When root is passed it will print root(1) and it will enter into the loop for the children   
  for(int i=0; i<root->children.size(); i++){              //this iterates for the no.of times that the no.of children for the root                        
    PrintTree(root->children[i]);                          //this checks and prints the children of the children of the root
  }                                                        
 }
 
 explaination:
 
 Let's understand with an example  Root(1):children(2,3)  
 from the above code  line3 is executed and root(1) is printed and then it has 2 children so loop iterates for 2 times 
 
 In the first Iteration, Inside the loop there is a recursive call and we passing child1(2), first it prints root(2 at present as children[0] is passed as the argument) 
 of the root which checks for the children as there are no children for 2  it comes out of the loop and returns..
 
 In the second iteration it checks for the child2(3), prints root i.e 3 at present call and return without going into loop as there are no children.
 
 OUTPUT:
 1
 2
 3
 But this output is not enough to get detailed info of trees
 
 

 >>>>>>>so we need output something like this:
  output- 1:2,3
          2:
          3:
          
 void PrintTree(TreeNode<int>* root){                            //Modified PrintTree function
 if(root==NULL){
 return;
 }
 
  cout<< root->data <<":"<<endl; 
  for(int i=0;i<root->children.size();i++){
  cout<< root->children[i]->data <<",";
  }
  cout<<endl;
  
  for(int i=0; i< root->children.size(); i++){                                 
    PrintTree(root->children[i]);                         
  }                                                        
 }
