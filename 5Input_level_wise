------------------------------------------------------------Taking Input level wise--------------------------------------------------------------------------------------



TreeNode<int>* takeInputLevelWise(){
    int rootData;
    cout<<"Enter root data"<<endl;
    cin>>rootData;
    TreeNode<int>* root=new TreeNode<int>(rootData);
    
    queue<TreeNode<int>*> pendingNodes;
    pendingNodes.push(root);
    
    while(pendingNodes.size()!=0){
        TreeNode<int>* front=pendingNodes.front();
        pendingNodes.pop();
        
        int n;
        cout<<"enter no.of children  "<<front->data<<endl;
        cin>>n;
        for(int i=0;i<n;i++){
            int childNode;
            cout<<"enter "<<i<<"th child of"<<front->data<<endl;
            cin>>childNode;
            TreeNode<int>* child=new TreeNode<int>(childNode);
            front->children.push_back(child);
            pendingNodes.push(child);
        }
    }
    
    return root;
}






#include<queue>
TreeNode<int>* TakeInputLevelWise()
{
    int data;
    cout<<"enter root data:"<<endl;
    cin>>data;
    TreeNode<int>* root=new TreeNode<int>(data);
    
    queue<TreeNode<int>*> pendingNodes;                     //creating queue so that we can push elements in level wise and in the same order we can input the children                                                                 of the nodes as they are poped out in the order they are inserted
    pendingNodes.push(root);                                //pushing the root element into the queue
    while(pendingNodes.size()!=0)
    {                          //loop iterates untill the queue becomes empty
      TreeNode<int>* front=pendingNodes.front();
      pendingNodes.pop();
      cout<<"enter the no.of children of "<<front->data<<endl;
      int nchild;
      cin>>nchild;
      for(int i=0;i<nchild;i++)
      {
        cout<<"enter the data for "<<i<<"th child of"<<front->data<<endl;         
        int child_data;
        cin>>child_data;                                                      //input for the data of the each children
        Treenode<int>* child=new Treenode<int>(child_data);                   //Creating tree nodes for children in each iteration by passing ith node data as the argument
        front->children.push_back(child);                                     //connecting the present created child node to the current root node
        pendingNodes.push(child);                                             //pushing into stack so that input for child nodes taken in the order that they are created
      }
    }
}
